using static System.Console

val tree = BinaryTree()

writeLine(tree.isEmpty)
tree.add(5)
writeLine(tree.isEmpty)
tree.add(3)
tree.add(7)
tree.add(1)

foreach item, index in tree.enumerateInOrder().indexed() {
  writeLine("Item at $index = $item")
}

class BinaryTree {
  private var root: TreeNode? = null
  
  val isEmpty: Bool {
    get => .root is null
  }
  
  func add(value: Int32) {
    if .root is null {
      .root = TreeNode(value = value)
    } else {
      .root.add(value)
    }
  }
  
  func contains(value: Int32): Bool {
    return .root?.contains(value) ?? false
  }
  
  func enumerateInOrder(): IEnumerable<Int32> {
    if .root is null {
      yield break
    }
    
    yield all .root.enumerateInOrder()
  }
  
  class TreeNode {
    val value: Int32
    var left: TreeNode? = null
    var right: TreeNode? = null
    
    func add(value: Int32): TreeNode {
      return if value < .value {
        if left is null {
          left = TreeNode(value = value)
        } else {
          left.add(value)
        }
      } else if value > .value {
        if right is null {
          right = TreeNode(value = value)
        } else {
          right.add(value)
        }
      } else {
        this
      }
    }
    
    func contains(value: Int32): Bool {
      return if value == .value {
        true
      } else if value < .value {
        left?.contains(value) ?: false
      } else {
        right?.contains(value) ?: false
      }
    }
    
    func enumerateInOrder(): IEnumerable<Int32> {
      yield all .left?.enumerateInOrder() ?? []
      yield .value
      yield all .right?.enumerateInOrder() ?? []
    }
  }
}
